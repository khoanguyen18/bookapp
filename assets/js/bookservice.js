"use strict";
/* Book Service */
var bookService = angular.module('bcBookService', []);

bookService.factory('bcBookService', ['$http', '$q', '$state', '$rootScope',
    function($http, $q, $state, $rootScope) {
        var allBooksList = [];

        /* Get all books */
        var getAllBooks = function() {
            var url = 'ajax/booklist.json';
            return _ajaxCall(url, 'GET');
        }

        var getBookDetailsById = function(bookId) {
            /* Simulate Server call with promises */
            var defer = $q.defer();

            if (allBooksList[bookId] != undefined) {
                defer.resolve(allBooksList[bookId]);
            } else {
                defer.reject(false);
            }

            return defer.promise;
        }

        /* Submit book */
        var submitBookEntry = function(book) {
            /* Simulate Server call with promises */
            var defer = $q.defer();

            /* can add dashes for coolness */
            var title = book.title.toLowerCase().replace(/\s/g, '');

            /* quick check to see if book exists */
            if (allBooksList[title] == undefined) {
                /* Generate pretend Id from server */
                book['id'] = Object.keys(allBooksList).length;


                /* Put into local cache storage */
                allBooksList[title] = book;

                defer.resolve(true);
            } else {
                /* Book exists, return */
                defer.reject(false);
            }
            return defer.promise;
        }

        /* Ajax utility method, in this case, only GET calls. In future, we could do special caching here*/
        var _ajaxCall = function(url, method, data) {
            /* defer */
            var defer = $q.defer();

            //Seeded booklist already loaded, no need to call again
            if (Object.keys(allBooksList).length > 0) {
                defer.resolve(allBooksList);
                return defer.promise
            }

            $http({
                method: method,
                url: url
            }).
            success(function(data) {
                allBooksList = data;
                return defer.resolve(data);
            }).
            error(function(data, status) {
                //Error, coudlnt make ajax call
                return defer.reject(status);
            });

            /* return promise */
            return defer.promise;
        };


        return {
            'getAllBooks': getAllBooks,
            'submitBookEntry': submitBookEntry,
            'getBookDetailsById': getBookDetailsById
        }
    }
]);


/* Review Service */
var bookReviewService = angular.module('bcBookReviewService', []);

bookReviewService.factory('bcBookReviewService', ['$http', '$q', '$state',
    function($http, $q, $state) {
        /* allcomments stored here */
        var allComments = {};

        /* Used to Mock DB call */
        var populateFakeData = function() {
            var defer = $q.defer();

            //Simulate caching. If already called, do not call again and return cache
            //We can cache bust on prod everytime new review is added
            if(Object.keys(allComments).length < 1) { 
                var url = 'ajax/bookreview.json';
                _ajaxCall(url, 'GET').then(function(data){
                    allComments = data;
                    defer.resolve(data);
                });
            }else{
                defer.resolve(true);
            }
            return defer.promise;
        }

        /* Get Reviews By Id */
        var getAllReviewsId = function(bookId) {
            //Simulate backend call. Data preloaded by populatefakedata
            var defer = $q.defer();
            if(allComments[bookId] == undefined) {
                allComments[bookId] = [];
            }

            defer.resolve(allComments[bookId]);
            return defer.promise;
        }

        /* Submit book */
        var submitReview = function(book, bookId) {
            /* Simulate Server call with promises */
            var defer = $q.defer();
            
            //Update our data to simulate backend storage.
            //in reality, we are just keeping track by using an internal object
            var comments = allComments[bookId];
            if(comments == undefined) comments = [];

            //Simulate ID generated by backend for CRUD functionality
            book['id'] = comments.length + 1;

            // Generate Timestamp. Can be used to sort.
            book['timestamp'] = parseInt((new Date().getTime()/1000).toFixed(0));

            //push book into internal array to simulate GET calls later.
            comments.push(book);
            allComments[bookId] = comments;

            // No errors in this case, in prod, you would need to check backend for status 
            defer.resolve(true);

            return defer.promise;
        };


        /* Ajax utility method, in this case, only GET calls. In future, we could do special caching here*/
        var _ajaxCall = function(url, method, data) {
            var defer = $q.defer();
            $http({
                method: method,
                url: url,
                data: data
            }).
            success(function(data) {
                return defer.resolve(data);
            }).
            error(function(data, status) {
                return defer.reject();
            });

            return defer.promise;

        };
        return {
            'populateFakeData': populateFakeData,
            'submitReview': submitReview,
            'getAllReviewsId': getAllReviewsId
        }
    }
]);